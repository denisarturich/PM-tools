# Цель

Создать веб‑приложение «Справочник промптов для менеджеров проектов» с базой данных, удобным поиском/фильтрацией и UX для копирования и разворачивания полного текста промптов. Приложение деплоится на Replit.

---

# Технологии (предпочтительно)

* **Frontend**: React + Vite, TypeScript, TailwindCSS.
* **UI-библиотека**: shadcn/ui (Radix), lucide-react для иконок.
* **Backend**: Node.js + Express.
* **БД**: SQLite (через Prisma ORM) — файл `data.sqlite` хранится в репозитории.
* **Развёртывание**: Replit Nix/Node template. Один Repl для всего стекa.

*(Если проще — можно Flask + SQLite. Но по умолчанию делай вариант на Node/Express + Prisma.)*

---

# Основные пользовательские сценарии

1. Просмотр списка промптов в виде карточек/строк: название, короткое описание, кнопки «Скопировать» и «Развернуть».
2. По клику «Развернуть» открывается модальное окно с названием, описанием и **полным текстом** промпта + кнопка «Скопировать». (Модал, не отдельная вкладка.)
3. По клику «Скопировать» — в буфер копируется **полный текст** промпта, показывается ненавязчивый toast «Скопировано».
4. В шапке сайта — CTA‑кнопка «Предложить промпт» → ведёт на страницу LinkedIn владельца проекта (открывать в новой вкладке) + пояснение, что можно добавить в друзья и отправить предложение. Если LinkedIn недоступен, показать альтернативную ссылку `mailto:`.
5. Возможность легко добавлять новые промпты через **админ‑панель** (простая форма), защищённую базовой авторизацией (логин/пароль из `.env`).
6. Поиск и фильтры: строка поиска (по названию, описанию, полному тексту), фильтр по **этапу проекта** и **тегам**.

---

# Структура данных

Модель Prisma `Prompt`:

```prisma
model Prompt {
  id          String   @id @default(cuid())
  title       String   @db.VarChar(200)
  slug        String   @unique @db.VarChar(200)
  summary     String   @db.VarChar(500)
  fullText    String   // полный текст промпта (многострочный)
  stage       String   @db.VarChar(100) // этап проекта, напр.: discovery, planning, execution, monitoring, closing
  tags        String[] // массив тегов (Prisma JSON или String[] через SQLite JSON)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
```

> Примечание: для SQLite можно хранить `tags` как JSON. Если сложно — использовать отдельную таблицу `Tag` и таблицу связей `PromptTag`.

---

# API (Express)

* `GET /api/prompts` — список промптов с фильтрами/поиском: `?q=&stage=&tags=tag1,tag2&page=1&pageSize=20`.
* `GET /api/prompts/:slug` — карточка промпта с полным текстом.
* `POST /api/admin/prompts` — создать (требует базовую авторизацию).
* `PUT /api/admin/prompts/:id` — обновить (авторизация).
* `DELETE /api/admin/prompts/:id` — удалить (авторизация).
* Здоровье: `GET /api/health` → `{ ok: true }`.

Авторизация админ‑роутов: Basic Auth. Данные — из `.env`:

```
ADMIN_USER=admin
ADMIN_PASS=strong_password_here
LINKEDIN_URL=https://www.linkedin.com/in/<ваш-профиль>/
FALLBACK_EMAIL=you@example.com
```

---

# UI/UX

**Header**

* Лого/название проекта (например, «Вайбкодинг: PM Prompts»).
* Кнопка «Предложить промпт»: `target="_blank" rel="noopener"` → `process.env.LINKEDIN_URL`. Рядом иконка LinkedIn.
* Текст при наведении: «Добавьте меня в друзья и пришлите ваш вариант промпта». Если `LINKEDIN_URL` пустой — скрыть кнопку или показать `mailto:FALLBACK_EMAIL?subject=Предложение%20промпта`.

**Главная**

* Поле поиска (debounce 300мс, ищет по title/summary/fullText, подсвечивание совпадений опционально).
* Фильтр по этапу (dropdown) и по тегам (мультиселект).
* Список карточек промптов. Каждая карточка:

  * Заголовок (title)
  * Короткое описание (summary)
  * Бейджи этапа и тегов
  * Кнопки: «Скопировать» (копирует `fullText`), «Развернуть» (открывает модал с `fullText`)

**Модальное окно**

* Заголовок: title
* Подзаголовок: summary
* Полный текст промпта в `<pre>`/`<code>` с кнопкой «Скопировать».
* Кнопка закрытия (Esc), клик по backdrop — закрыть.

**Админ**

* `/admin/login` (Basic Auth можно сделать на уровне роутов + простая страница проверки).
* `/admin` — таблица промптов + кнопка «Добавить». Форма с полями: title, summary, fullText (textarea), stage (select), tags (input с разделителем запятая).

**Состояния/прочее**

* Toast‑уведомления (успех/ошибка).
* Пустые состояния («Ничего не найдено…»).
* Skeleton‑заглушки при загрузке.
* Адаптивность (мобайл‑фёрст).

---

# Поиск (на сервере)

* Параметр `q` — разбиение на токены, поиск по `title`, `summary`, `fullText` через `LIKE` с нормализацией регистра. Для производительности — добавить виртуальное поле `searchText` (конкатенация) и индекс (если потребуется, для SQLite можно создать FTS5 таблицу; опционально).

---

# Начальные данные (seeds)

Добавить 10–15 демонстрационных промптов для этапов: discovery, planning, execution, monitoring, closing. Примеры (RU):

* «Анализ заинтересованных сторон» — кратко; полный текст …
* «Декомпозиция работ (WBS)» — кратко; полный текст …
* «Оценка рисков (матрица вероятности/влияния)» — кратко; полный текст …
* «План коммуникаций» — кратко; полный текст …
* «Retrospective debrief» — кратко; полный текст …

(Заполни содержимое сам реалистичными шаблонами.)

---

# Дерево проекта

```
/
├─ prisma/
│  ├─ schema.prisma
│  └─ seed.ts
├─ src/
│  ├─ server/
│  │  ├─ index.ts (Express)
│  │  ├─ routes/
│  │  │  ├─ prompts.ts
│  │  │  └─ admin.ts
│  │  └─ lib/
│  │     └─ prisma.ts
│  └─ web/
│     ├─ main.tsx
│     ├─ App.tsx
│     ├─ pages/
│     │  ├─ Home.tsx
│     │  └─ Admin.tsx
│     ├─ components/
│     │  ├─ PromptCard.tsx
│     │  ├─ PromptModal.tsx
│     │  ├─ SearchBar.tsx
│     │  ├─ Filters.tsx
│     │  └─ Header.tsx
│     └─ ui/ (shadcn)
├─ public/
│  └─ favicon.svg
├─ .env (LINKEDIN_URL, FALLBACK_EMAIL, ADMIN_USER, ADMIN_PASS)
├─ replit.nix / nixpacks.toml (если требуется)
├─ package.json (скрипты dev/build/start)
└─ README.md
```

---

# Реализация «Скопировать»

* Везде использовать `navigator.clipboard.writeText(fullText)` с graceful fallback через скрытое `<textarea>`.
* Toast‑сообщение «Промпт скопирован».
* Горячая клавиша: в модальном окне `Ctrl/Cmd+C` копирует `fullText`.

---

# Доступность (a11y)

* Фокус‑ловушка в модальном окне, `aria-labelledby`, `aria-describedby`.
* Контраст и размеры кликабельных элементов ≥ 40px.
* Поддержка клавиатуры (Enter/Space для кнопок, Esc — закрыть модал).

---

# Аналитика и SEO

* Добавить легковесную аналитику (например, Plausible или счётчик Я.Метрики) — опционально, подключать через ENV.
* SEO: `<title>`, `<meta name="description">`, open graph теги.

---

# Инструкции для Replit (что нужно сгенерировать)

1. Инициализируй проект с указанным деревом, настрой Vite + React + TS + Tailwind + shadcn/ui.
2. Настрой сервер Express на `/api/*` и статическую раздачу собранного фронтенда (`dist/`).
3. Подключи Prisma + SQLite, создай модель `Prompt`, сделай миграцию, добавь `seed.ts` с 10–15 примерами.
4. Реализуй API‑роуты, фильтры и поиск.
5. Реализуй UI: Header (с кнопкой на LinkedIn), Home (поиск, фильтры, карточки, модал), Admin (CRUD, Basic Auth).
6. Сделай кнопки «Скопировать», модальное окно с полным текстом, тосты, skeleton‑ы.
7. Добавь ENV‑переменные и используй их. При отсутствии `LINKEDIN_URL` — показывай `mailto:FALLBACK_EMAIL`.
8. Добавь README.md с инструкцией запуска (dev/build/start), командами `prisma migrate`, `prisma db seed`.
9. Обеспечь адаптивность и базовую доступность.
10. Прогони локально, чтобы всё работало из коробки на Replit (одна команда `npm run start`).

---

# Тексты/копирайтинг (RU)

* Заголовок сайта: «Справочник промптов для менеджеров проектов»
* Подзаголовок: «Готовые шаблоны промптов для любых этапов проекта: от discovery до закрытия»
* Кнопка в хедере: «Предложить промпт» (title: «Добавьте меня в друзья на LinkedIn и пришлите ваш вариант»)
* Кнопки в карточках: «Скопировать», «Развернуть»
* Поля форм: «Название», «Короткое описание», «Полный текст», «Этап», «Теги»
* Пустое состояние: «Промптов не найдено. Попробуйте изменить запрос или фильтры.»
* Тост: «Промпт скопирован» / «Ошибка копирования»

---

# Качество кода

* Строгий TypeScript.
* Линтинг (ESLint) и Prettier.
* Разделение UI/логики, статические типы для сущностей и API-ответов.

---

# Дополнительно (опционально)

* Экспорт промпта в `.md`/`.txt` файл.
* Импорт/экспорт каталога (JSON) через админку.
* Поддержка нескольких языков UI (RU/EN) через i18n.
* FTS5 индекс в SQLite для мгновенного поиска.

---

# Что подставить (плейсхолдеры)

* `LINKEDIN_URL`: [https://www.linkedin.com/in/](https://www.linkedin.com/in/)<ВАШ-СЛАГ>/
* `FALLBACK_EMAIL`: [yourname@example.com](mailto:yourname@example.com)
* Название/брендинг: «Вайбкодинг: PM Prompts» (можно поменять)

---

# Готовый запрос для Replit (вставить как есть)

**Сделай полнофункциональное приложение по спецификации выше.** Используй стек React+Vite+TS+Tailwind+shadcn/ui на фронте, Express на бэке, Prisma+SQLite для БД. Включи seed‑данные, реализуй поиск и фильтры, кнопки копирования и модальное окно, админ‑панель с Basic Auth, кнопку «Предложить промпт», берущую URL из `LINKEDIN_URL` (или `mailto:` из `FALLBACK_EMAIL`). Настрой сборку и запуск на Replit одной командой `npm run start`. Напиши подробный README.
